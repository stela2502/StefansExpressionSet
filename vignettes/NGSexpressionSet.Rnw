\documentclass{article}


\begin{document}

\section{Initial comments}

If you have used the NGSexpressionSet from my GitHub account and are now moving
to this updated summary class instead, you have to change the package atribute
for your old objects like that before you can use them again!

<<change_package_name>>=
## not run
if ( FALSE) {
	attr(class(oldObject),'package') <- 'StefansExpressionSet'
}
@



\section{Introduction}

The NGSexpressionSet R S4 class has been produced to make my live easier. It is
not developed for a larger audience and therefore some functions might not be
flexible enought for all workflows.

The overall aim of this package is to (1) keep all analysis results in one
object and (2) simplify the plotting by using the previousely stored objects.

The auim of this document is not to explain all options for the functions, but
to give one working example.

But not too much here lets start.

<<libLoad, echo=FALSE >>=
	library(devtools)
	load_all(pkg='../',quiet=TRUE)
@


\section{Get your data into the object}

The package comes with example data; A data.frame containing count data
published in PMID25158935 re-mapped and re-quantified using DEseq (\Sexpr{dim(PMID25158935exp)}) and one
data.frame containing the sample information
(\Sexpr{dim(PMID25158935samples)}):

<<counts>>=
	head(PMID25158935exp)
@

These two tables are loaded into a NGSexpressionSet object using the command:
<<createObject>>=
	PMID25158935 <- NGSexpressionSet( 
			PMID25158935exp, 
			PMID25158935samples, 
			Analysis = NULL, 
			name='PMID25158935', 
			namecol='Sample',	
			namerow= 'GeneID', 
			usecol=NULL , 
			outpath = ''
	)
@

Here you already see, that the object is tailored to my needs:
The options Analysis and usecol can be used to subselect samples in the samples
table and create a smaller than possible object from the count data.
Please use the R help system to get more information on all functions.
And the object does print like that:

<<objPrint>>=
	PMID25158935
@

This should be quite straight forward.

\section{Subsetting the object}

This is the main purpose why I created the class in the first place. An easy way
to consitantly subsett multiple tables at the same time.

I have implemented two functions: "reduce.Obj" which subsets the object to a
list of genes and "drop.samples" which does - guess what - drop samples.

<<reduceObj>>=
	reduced <- reduce.Obj(PMID25158935, 
			sample(rownames(PMID25158935@data), 100), 
			name="100 genes" )
	reduced
@

<<drop.Samples>>=
	dropped <- drop.samples(
			PMID25158935, 
			colnames(PMID25158935@data)[1:3], 
			name='3 samples dropped'
	)
	dropped
	subs <- reduce.Obj ( PMID25158935,
			rownames(PMID25158935@data)[
					order( apply( PMID25158935@data, 1, sd), decreasing=T ) [ 1:100 ] 
			], 
			'max_sd_genes' 
	)
@

An additional function 'restrictSamples' removes samples based on a match on
a variable in the samples table.

<<restrictSamples>>=
	dropped <- restrictSamples(
			PMID25158935, 
			column ='Characteristics.cell.type',
			value= 'multipotent progenitor',
			mode='grep',
			name='only HSC left'
	)
	dropped
@

\section{Unconventional checks}

I have implemented a rather unconventional check for the NGS data objects:
reads.taken(). This function checks the percentage of reads consumed by the top
5 percent of genes and thereby creates a measurement of the library depth.

I have created a rule of thub: a good (mouse) expression dataset should
not use more than 77\% of the reads in the top 5\% of the genes.

<<reads.taken>>=
	reads.taken(PMID25158935)$reads.taken
@

And this dataset is a very good one. And as I am lasy there is another function,
that directly gives the names for the bad samples back: check.depth()

<<check.depth>>=
	check.depth(PMID25158935,cutoff=0.62 )
@

You see I have lowered the cutoff so that I find bad samples in this extremely
good dataset.


\section{Statistics}

The statistic analysis is also keeping my workload low: One call runs them all.

But unfortunaltely this is broken! Need to fix that :-(
)
<<statistics, cache=TRUE >>=
	## from these values I can choose to create statistics:
	colnames(PMID25158935@samples)
	## and the GroupName might be the best to start from
	table(PMID25158935@samples$GroupName)
	#withStats <- createStats( subs, 'GroupName' )
@


\section{Grouping}

The grouping part of this object is under development at the moment and likely to gain new functions.
The underlying logics in the future grouping will be, that whichever grouping process you ask for, 
the results will be added to the respective description table slot (samples or annotation) and will 
be accessible for potting later on. \\
I am planning to implement most of the Rscexv grouping functions here too. But that will take time.


\subsection{rfCluster\_col}

The most interesting grouping function is rfCluster\_col(). It utilizes a
unsupervised random foret to calculate the distance matrix for the data. As this process is very computer intensive the function 
allows the calculation to be run on a sun grid engine cluster. But you can also use that on you local computer.

\subsubsection{Usage}

This function has been developed to cluster single cell data with hundreads or
thousands of samples.

The rfCluster\_col run will create a lot of outout data that you can delete
after the grouping process is finished. The files are in the objects outpath/RFclust.mp/
folder.
The files starting with runRFclust are all connected with the spawned
calculation threads; the objects name'\_RFclust\_*ID*.RData' files are the
subset of the original data for one run and the other *.RData files are the
saved random forest distributions.

The random forest output is read into the object after a second run of the same
function call. Make sure you use the right StefansExpressionSet object for that!

<<rfCluster_col, cache=TRUE>>=
	subs  
	subs.C <- rfCluster_col(subs, 
			rep=1, # one analysis only
			SGE=F, # Do not use the SGE extension 
			email='not@important.without.SGE', # necessary 
			k=3, #how many clusters to find
			slice=4, # how many processes to span per run
			subset=nrow(subs@samples), # use the whole dataset
			nforest=5, # how many forets per rep - set that to 500
			ntree=100, # how many trees per forest - set that to 1000
			name='RFclust' # the name of this analysis (rename if re-run)
	)
	
Sys.sleep(50)
subs.C <- rfCluster_col(subs.C, ## <- this change is important!! 
		rep=1, # one analysis only
		SGE=F, # Do not use the SGE extension 
		email='not@important.without.SGE', # necessary 
		k=3, #how many clusters to find
		slice=4, # how many processes to span per run
		subset=nrow(subs@samples), # use the whole dataset
		nforest=5, # how many forets per rep - set that to 500
		ntree=100, # how many trees per forest - set that to 1000
		name='RFclust' # the name of this analysis (rename if re-run)
)

table(
	apply( 
		subs.C@samples[,c('GroupName', 'RFgrouping RFclust 1')],
		1, 
		paste, 
		collapse= "/gr.")
)

@

Once this grouping has been run and the object keeps unchanged, you can create a
different grouping based on the same random forest distribution.
In order to do that you need the createRFgrouping\_col() function.

<<createRFgrouping_samples>>=
subs.C <- createRFgrouping_col ( subs.C, 
		'max_sd_genes_RFclust_1' , 
		k=2, 
		single_res_col = 'Our new grouing'
)
	
table(
	apply( 
	   subs.C@samples[,c('GroupName', 'Our new grouing')],
	   1, 
	   paste, 
	   collapse= "/gr.")
	)
@


\subsubsection{TODO}

Reduce the memory requirement for the final distance matrix reading process.


\subsection{rfCluster\_row}

The rfCluster\_col does cluster samples and the rfCluster\_row clusters genes in
this object. Otherwise the handling is exactly the same. Apart from the fact,
that we have way less samples than genes. Therefore it is extremely important to
first select a group of interesting genes from the dataset and run the
clustering from there.

All in all this function is not tested enough to be called stable.

<<rfCluster_row, cache=TRUE>>=
	subs  
	subs.C <- rfCluster_row(subs.C, 
			rep=1, # one analysis only
			SGE=F, # Do not use the SGE extension 
			email='not@important.without.SGE', # necessary 
			k=3, #how many clusters to find
			slice=4, # how many processes to span per run
			subset=nrow(subs@samples), # use the whole dataset
			nforest=5, # how many forets per rep - set that to 500
			ntree=100, # how many trees per forest - set that to 1000
			name='RFclust_row' # the name of this analysis (rename if re-run)
	)
	
Sys.sleep(50)
subs.C <- rfCluster_row(subs.C, ## <- this change is important!! 
		rep=1, # one analysis only
		SGE=F, # Do not use the SGE extension 
		email='not@important.without.SGE', # necessary 
		k=3, #how many clusters to find
		slice=4, # how many processes to span per run
		subset=nrow(subs@samples), # use the whole dataset
		nforest=5, # how many forets per rep - set that to 500
		ntree=100, # how many trees per forest - set that to 1000
		name='RFclust_row' # the name of this analysis (rename if re-run)
)

table(subs.C@annotation[,'RFgrouping RFclust_row 1'])

@

Once this grouping has been run and the object keeps unchanged, you can create a
different grouping based on the same random forest distribution.
In order to do that you need the createRFgrouping\_row() function.

<<createRFgrouping_row>>=
subs.C <- createRFgrouping_row ( subs.C, 
		'max_sd_genes_RFclust_row_1' , 
		k=2, 
		single_res_row = 'Our new grouing'
)
	
table(subs.C@annotation[,c( 'Our new grouing')])
@


\section{Plotting}

This is the second most important part of the object.

\subsection{ggplot2}

I will first explain how to create the ggplot2 plots also used for our shiny
server. The function ggplot.gene is described in figure \ref{ggplot.gene} on
page \pageref{ggplot.gene}; the function gg.heatmap.list is described in figure
\ref{gg.heatmap.list} on page \pageref{gg.heatmap.list}.

\begin{figure}
\label{ggplot.gene}
<<ggplot.gene>>=
	ggplot.gene (PMID25158935, 'Foxo1', groupCol='GroupName' )
@
\end{figure}

\begin{figure}
\label{gg.heatmap.list}
<<gg.heatmap.list>>=
	gg.heatmap.list (PMID25158935, c('Mpo', 'Gata1', 'Foxo1'), 
			groupCol='GroupName' )
@
\end{figure}

I have created the gg.heatmap.list function in a way, that you can also add
column - and row -grouping information to the plot. The first level you have
already seen in the groupCol='GroupName' option, but you can enhance that by
adding more variables to the groupCol (the first will be used for the facets).


But as you see in figure \ref{gg.heatmap.list2} on page
\pageref{gg.heatmap.list2} the ggplot2 based heatmap.3 is far from perfect at
the moment.
Instead of putting a lot of time into this function I have implemented a call to
heatmap.3 into the object.
\begin{figure}
\label{gg.heatmap.list2}
<<gg.heatmap.list.moreColGroups>>=
	gg.heatmap.list (subs.C, 
			groupCol=c( 'GroupName' ),
			colCol= c( 'RFgrouping RFclust 1' )
	)
@
\end{figure}

\subsection{heatmap.3}

The heatmap.3 function is called internally by the complexHeatmap() function.
As the name suggests - this function is far from simple and I recommend reading
of the internal R documentation (?complexHeatmap at the promt).

\begin{figure}
\label{complexHeatmap}
<<complexHeatmap>>=
# the color information is stored in the subs.C@usedObj[['colorRange']] list
# and we miss the GroupName colours ...
subs.C <- colors_4( subs.C, 'GroupName', 
		colFunc=function(x) { c( 'green','yellow', 'orange', 'red', 'purple') } 
)
subs.C <- colors_4( subs.C, 'RFgrouping RFclust 1' )
complexHeatmap (subs.C,  
	ofile=NULL, 
	colGroups=c('RFgrouping RFclust 1','GroupName'),
	rowGroups='RFgrouping RFclust_row 1',
	pdf=FALSE, 
	subpath='', 
	main = paste('complexHeatmap in action + RF gene grouping based on', nrow(subs@samples), 'genes'),
	heapmapCols= function(x){ c("darkgrey",bluered(x))} 
)
@
\end{figure}


\begin{figure}
\label{complexHeatmap}
<<complexHeatmap2>>=
# the color information is stored in the subs.C@usedObj[['colorRange']] list
# and we miss the GroupName colours ...
subs.C <- colors_4( subs.C, 'GroupName', 
		colFunc=function(x) { c( 'green','yellow', 'orange', 'red', 'purple') } 
)
subs.C <- colors_4( subs.C, 'RFgrouping RFclust 1' )
complexHeatmap (subs.C,  
	ofile=NULL, 
	colGroups=c('RFgrouping RFclust 1','GroupName'),
	pdf=FALSE, 
	subpath='', 
	main = 'complexHeatmap in action no gene grouping',
	heapmapCols= function(x){ c("darkgrey",bluered(x))} 
)
@
\end{figure}

\end{document}